'''
[컨베이어 벨트 위의 로봇]
길이가 N인 컨베이어 벨트,
길이가 2N인 벨트가 위 아래로 감쌌음

1 2 3 ... N-1 N
2N 2N-1 ... N+1

1번 위치를 "올리는 위치", N번 "내리는 위치"
로봇을 올리는 위치 / 이동하면 내구도 1 감소

1. 벨트가 각 칸 위에 있는 로봇과 함께 회전
2. 가장 먼저 벨트에 올라간 로봇부터, 회전하는 방향으로 이동
    - 만약 이동할 수 없다면 가만히 있는다.
    - 이동하려는 칸에 로봇이 없으며, 내구도가 1 이상
3. 올리는 위치의 칸에 내구도가 0이 아니면 로봇을 올린다.
4. 내구도가 0인 칸의 개수가 k개 이상이면 과정 종료 / 아님 1번

3 2
0 0 0
[1, 2, 1] [2, 1, 2]

1 0 0 올림
2 1 2 1 2 1
1 1 2 1 2 1

0 1 0 이동
1 0 2 1 2 1

1 1 0 올림
0 0 2 1 2 1

4, 5
[10, 1, 10, 6] [3, 4, 8, 2]

'''
from collections import deque

n, k = map(int, input().split())
A = list(map(int, input().split()))

d = [0]*n  # 로봇의 유무 기록

q = deque(A)
d = deque(d)

cnt = 0  # 횟수
while True:
    # 4. 0이 k개 이상이면
    if q.count(0) >= k:
        break
    # 1. 오른쪽으로 옮김
    q.rotate(1)
    d.rotate(1)
    d[-1] = 0  # 로봇 내림!
    # 2. 로봇 이동시키기
    if d:  # 로봇이 있다면!
        for i in range(n-1, 0, -1):  # i번에서 i-1번을 확인
            if d[i-1] == 1 and d[i] == 0 and q[i] > 0:
                d[i-1], d[i] = 0, 1
                q[i] -= 1
        if d[-1] == 1:  # 로봇 내림!
            d[-1] = 0
    # 3. 로봇 올리기
    if d[0] == 0 and q[0] > 0:
        d[0] = 1
        q[0] -= 1
    cnt += 1

print(cnt)